// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

model User {
  id         Int     @id @default(autoincrement())
  first_name String  @db.VarChar(100)
  last_name  String  @db.VarChar(100)
  email      String  @unique @db.VarChar(100)
  password   String  @db.VarChar(100)
  img_src    String?
  role       Role    @default(User)
  cart       Cart[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]

  @@map("users")
}

model Product {
  id           Int       @id @default(autoincrement())
  product_name String
  img_src      String
  price        Decimal   @db.Decimal(18, 2)
  slug         String    @unique
  isDeleted    DateTime?
  cart         Cart[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TransactionDetail TransactionDetail[]

  @@map("products")
}

model Cart {
  userId    Int
  productId Int
  User      User    @relation(fields: [userId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([productId, userId])
  @@map("carts")
}

enum TransactionStatus {
  PAID
  PENDING
}

model Transaction {
  id                Int                 @id @default(autoincrement())
  noInvoice         String              @unique
  status            TransactionStatus   @default(PENDING)
  userId            Int
  User              User                @relation(fields: [userId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TransactionDetail TransactionDetail[]
}

model TransactionDetail {
  id            Int      @id @default(autoincrement())
  price         Decimal  @db.Decimal(18, 2)
  productId     Int
  transactionId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Transaction Transaction @relation(fields: [transactionId], references: [id])
  Product     Product     @relation(fields: [productId], references: [id])
}
